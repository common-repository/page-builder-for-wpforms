rndefine("#RNMainTextFieldBlock",["#RNMainRNPage/RNBlockBase.Model","#RNMainCore/EventManager","#RNMainRNPage/RNBlockBase","#RNMainRNPage/RNBlockBase.Options","#RNMainCore/StoreBase","#RNMainSlateRenderer/SlateRenderer"],(function(e,t,l,a,r,n){"use strict";var o,s,i;let c=(o=r.StoreDataType(Object),s=class extends a.RNBlockBaseOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"Text",i,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=a.BlockTypeEnum.Text,this.Label="Text",this.Text=null}},i=babelHelpers.applyDecoratedDescriptor(s.prototype,"Text",[o],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),s);class p extends l.RNBlockBase{constructor(e){super(e),this.state={}}SubRender(){return React.createElement("div",null,""!=this.Model.Options.Label.trim()&&React.createElement("label",{className:"rnBlockLabel"},this.Model.Options.Label),React.createElement("div",null,n.SlateRenderer.Render(this.props.Model.Page,this.props.Model.Options.Text)))}}p.defaultProps={},t.EventManager.Subscribe("GetBlock",(e=>{if(e.Model.Options.Type==a.BlockTypeEnum.Text)return React.createElement(p,null)})),t.EventManager.Subscribe("GetBlockModel",(e=>{if(e.Options.Type==a.BlockTypeEnum.Text)return new u(e.Options,e.Parent)})),t.EventManager.Subscribe("GetBlockOptions",(e=>{if(e.Name==a.BlockTypeEnum.Text)return new c}));class u extends e.RNBlockBaseModel{constructor(e,t){super(e,t)}Render(){return React.createElement(p,{Model:this})}}exports.TextFieldBlockModel=u,exports.TextFieldBlockOptions=c,exports.TextFieldBlock=p}));
