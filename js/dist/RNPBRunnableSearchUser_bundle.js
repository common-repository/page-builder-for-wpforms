rndefine('#RNPBRunnableSearchUser', ['exports', '#RNPBRunnableSearchBar/RunnableSearchFieldBase', '#RNPBCore/EventManager', '#RNPBRunnableSearchBar/RunnableSearchFieldBase.Options', '#RNPBCore/WpAjaxPost', '#RNPBCore/Sanitizer'], (function (exports, RunnableSearchFieldBase, EventManager, RunnableSearchFieldBase_Options, WpAjaxPost, Sanitizer) { 'use strict';

    class RunnableSearchUserOptions extends RunnableSearchFieldBase_Options.RunnableSearchFieldBaseOptions {
      LoadDefaultValues() {
        super.LoadDefaultValues();
        this.UserSearchType = '';
      }

    }

    class RunnableSearchUser extends RunnableSearchFieldBase.RunnableSearchFieldBase {
      constructor(SearchBar, options) {
        super(SearchBar, options);
        this.Container.setAttribute('multiple', 'multiple');
        this.Container.removeAttribute('disabled');
        let selectedOptions = this.Container.querySelectorAll('option[selected]');
        let values = [];
        this.Map = new Map();
        selectedOptions.forEach(x => {
          this.Map.set(x.value, x.innerText);
          values.push({
            Id: x.value,
            Label: x.innerText
          });
        });
        this.TomSelect = new TomSelect(this.Container, {
          valueField: 'Id',
          labelField: 'Label',
          searchField: 'Label',
          options: values,
          plugins: ['remove_button'],
          load: async (query, callback) => {
            if (this.Options.UserSearchType == 'User') {
              let result = await WpAjaxPost.WpAjaxPost.Post('pb_search_user', {
                Query: query,
                Nonce: this.SearchBar.Page.GetPostItem('SearchUserNonce', '')
              });

              if (result == null) {
                callback();
                return;
              }

              result.forEach(x => this.Map.set(x.Id, x.Label));
              callback(result);
            } else {
              let result = await WpAjaxPost.WpAjaxPost.Post('pb_search_role', {
                Query: query,
                Nonce: this.SearchBar.Page.GetPostItem('SearchRoleNonce', '')
              });

              if (result == null) {
                callback();
                return;
              }

              result.forEach(x => this.Map.set(x.Id, x.Label));
              callback(result);
            }
          }
        });
        this.TomSelect.setValue(values.map(x => x.Id));
      }

      GetWasFilled() {
        return Sanitizer.Sanitizer.SanitizeStringArray(this.TomSelect.getValue()).length > 0;
      }

      InternalGetSearchInfo() {
        let Values = this.TomSelect.getValue();
        let newValues = [];
        Values.forEach(x => {
          newValues.push({
            Id: x,
            Label: this.Map.get(x)
          });
        });
        return newValues;
      }

    }
    EventManager.EventManager.Subscribe('GetSearchField', option => {
      if (option.Options.SearchType == 'User') return new RunnableSearchUser(option.SearchBar, new RunnableSearchUserOptions().Merge(option.Options));
    });

    exports.RunnableSearchUser = RunnableSearchUser;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
