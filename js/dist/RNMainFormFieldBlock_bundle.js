rndefine("#RNMainFormFieldBlock",["#RNMainCore/EventManager","#RNMainRNPage/RNBlockBase.Options","#RNMainCore/StoreBase","#RNMainRNPage/RNBlockWithDataSource.Options","#RNMainRNPage/RNBlockBase","#RNMainRNPage/RNBlockWithDataSource.Model"],(function(e,t,l,i,o,a){"use strict";var n,r,s;let d=(n=l.StoreDataType(String),r=class extends i.RNBlockWithDataSourceOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"FieldId",s,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=t.BlockTypeEnum.FormField,this.LabelType="sameasfield",this.FieldId="",this.DataSourceId=0,this.Label="",this.HideWhenEmpty=!1,this.FieldStyle="text",this.LabelPosition="Top"}},s=babelHelpers.applyDecoratedDescriptor(r.prototype,"FieldId",[n],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),r);class c extends o.RNBlockBase{constructor(e){super(e),this.state={}}SubRender(){let e=this.GetLabel();return React.createElement("div",{className:"position"+this.Model.Options.LabelPosition},""!=e&&React.createElement("label",{className:"rnBlockLabel"},e),this.GetValue())}GetLabel(){var e,t;return"sameasfield"==this.Model.Options.LabelType?null!==(e=null===(t=this.Model.DataSource)||void 0===t?void 0:t.GetColumnLabel(this.Model.Options.FieldId))&&void 0!==e?e:"":this.Model.Options.Label}GetValue(){var e,t,l;if("similar"==this.Model.Options.FieldStyle)return null===(l=this.Model.DataSource.GetSimilarInput(this.Model,this.Model.Options.FieldId))||void 0===l?void 0:l.Render();let i=(null===(e=this.Model.DataSource)||void 0===e?void 0:e.GetStringValue(this.Model.Options.FieldId)).split(/\r?\n/g);if(i.length>1){let e=[];for(let t of i)t.length>0&&e.push(t),e.push(React.createElement("br",null));return React.createElement("p",null,e)}return React.createElement("p",null,null===(t=this.Model.DataSource)||void 0===t?void 0:t.GetStringValue(this.Model.Options.FieldId))}}c.defaultProps={},e.EventManager.Subscribe("GetBlock",(e=>{if(e.Model.Options.Type==t.BlockTypeEnum.FormField)return React.createElement(c,null)})),e.EventManager.Subscribe("GetBlockModel",(e=>{if(e.Options.Type==t.BlockTypeEnum.FormField)return new u(e.Options,e.Parent)})),e.EventManager.Subscribe("GetBlockOptions",(e=>{if(e.Name==t.BlockTypeEnum.FormField)return new d}));class u extends a.RNBlockWithDataSourceModel{constructor(e,t){super(e,t)}Render(){return this.Options.HideWhenEmpty&&this.DataSource.IsEmpty(this.Options.FieldId)?null:React.createElement(c,{Model:this})}}exports.FormFieldBlockModel=u,exports.FormFieldBlockOptions=d,exports.FormFieldBlock=c}));
