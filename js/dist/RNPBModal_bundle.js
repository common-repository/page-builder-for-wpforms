rndefine("#RNPBModal",["exports","lit"],(function(e,t){"use strict";const o=(()=>{const e=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'];class t{constructor({targetModal:e,triggers:t=[],onShow:o=(()=>{}),onClose:i=(()=>{}),openTrigger:s="data-micromodal-trigger",closeTrigger:n="data-micromodal-close",openClass:a="is-open",disableScroll:l=!1,disableFocus:d=!1,awaitCloseAnimation:r=!1,awaitOpenAnimation:c=!1,debugMode:h=!1}){this.modal=e,this.config={debugMode:h,disableScroll:l,openTrigger:s,closeTrigger:n,openClass:a,onShow:o,onClose:i,awaitCloseAnimation:r,awaitOpenAnimation:c,disableFocus:d},t.length>0&&this.registerTriggers(...t),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}registerTriggers(...e){e.filter(Boolean).forEach((e=>{e.addEventListener("click",(e=>this.showModal(e)))}))}showModal(e=null){if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){const e=()=>{this.modal.removeEventListener("animationend",e,!1),this.setFocusToFirstNode()};this.modal.addEventListener("animationend",e,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,e)}closeModal(e=null){const t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){let e=this.config.openClass;this.modal.addEventListener("animationend",(function o(){t.classList.remove(e),t.removeEventListener("animationend",o,!1)}),!1)}else t.classList.remove(this.config.openClass)}closeModalById(e){this.modal&&this.closeModal()}scrollBehaviour(e){if(!this.config.disableScroll)return;const t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}addEventListeners(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}removeEventListeners(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}onClick(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}onKeydown(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}getFocusableNodes(){const t=this.modal.querySelectorAll(e);return Array(...t)}setFocusToFirstNode(){if(this.config.disableFocus)return;const e=this.getFocusableNodes();if(0===e.length)return;const t=e.filter((e=>!e.hasAttribute(this.config.closeTrigger)));t.length>0&&t[0].focus(),0===t.length&&e[0].focus()}retainFocus(e){let t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((e=>null!==e.offsetParent)),this.modal.contains(document.activeElement)){const o=t.indexOf(document.activeElement);e.shiftKey&&0===o&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&o===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}let o=null;const i=e=>{if(!document.getElementById(e))return console.warn(`MicroModal: ❗Seems like you have missed %c'${e}'`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",`<div class="modal" id="${e}"></div>`),!1},s=(e,t)=>{if((e=>{if(e.length<=0)console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')})(e),!t)return!0;for(var o in t)i(o);return!0};return{init:e=>{const i=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=[...document.querySelectorAll(`[${i.openTrigger}]`)],a=((e,t)=>{const o=[];return e.forEach((e=>{const i=e.attributes[t].value;void 0===o[i]&&(o[i]=[]),o[i].push(e)})),o})(n,i.openTrigger);if(!0!==i.debugMode||!1!==s(n,a))for(var l in a){let e=a[l];i.targetModal=l,i.triggers=[...e],o=new t(i)}},show:(e,s)=>{const n=s||{};n.targetModal=e,!0===n.debugMode&&!1===i(e)||(o&&o.removeEventListeners(),o=new t(n),o.showModal())},close:e=>{e?o.closeModalById(e):o.closeModal()}}})();e.Modal=class{static Show(e,i){let s=t.html` <div class="modal micromodal-slide" aria-hidden="true"> <div class="modal__overlay" tabindex="-1" data-micromodal-close> <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="modal-1-title"> <header class="modal__header"> <h2 class="modal__title" id="modal-1-title"> ${e} </h2> <button class="modal__close" aria-label="Close modal" data-micromodal-close></button> </header> <main class="modal__content" id="modal-1-content"> ${i} </main> </div> </div> </div> `;document.createElement("div");let n=t.renderInline(s);document.body.appendChild(n),o.show(n,null)}},Object.defineProperty(e,"__esModule",{value:!0})}));
