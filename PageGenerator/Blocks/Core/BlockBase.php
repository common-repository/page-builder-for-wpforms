<?php

namespace rnpagebuilder\PageGenerator\Blocks\Core;

use rnpagebuilder\DTO\BlockBaseOptionsDTO;
use rnpagebuilder\PageGenerator\Core\PageGenerator;
use rnpagebuilder\PageGenerator\Core\RendererBase;
use rnpagebuilder\PageGenerator\TextRenderer\Core\ITextRendererParent;

abstract class BlockBase extends RendererBase
{
    /** @var Column */
    public $Column;
    /** @var BlockBaseOptionsDTO */
    public $Options;
    static $CoreWasLoaded=false;
    public static $DependencyHooks=[];

    public function __construct($column,$blockBaseOptions)
    {
        parent::__construct($column->loader);
        $this->Column=$column;
        $this->Options=$blockBaseOptions;
    }

    /**
     * @return PageGenerator
     */
    public function GetPageGenerator(){
        return $this->Column->Row->Parent->GetPageGenerator();
    }

    public function GetEntryRetriever(){
        return $this->GetPageGenerator()->EntryRetriever;
    }

    public function GetBlockPostItem(){
        return $this->GetPageGenerator()->GetFieldPostItem($this);
    }

    public function AddScript($hook,$path,$dep=[])
    {
        self::$DependencyHooks[]='@'.$hook;


        for($i=0;$i<count($dep);$i++)
        {
            $dep[$i]=\str_replace('@',$this->loader->Prefix.'_',$dep[$i]);
        }

        $this->loader->AddScript($hook,$path,array_merge(array('@runnablepage'),$dep));
    }

    public function Render()
    {
        $this->BeforeRender();
        return parent::Render(); // TODO: Change the autogenerated stub
    }


    public function MaybeUpdateDataSource(){

    }

    protected abstract function GetTemplateName();

    protected function BeforeRender()
    {
    }

    public function GetAdditionalClasses(){
        if(isset($this->Options->Class))
            return $this->Options->Class;
        return '';
    }

}