<?php

namespace rnpagebuilder\PageGenerator\Core\Area;

use rnpagebuilder\core\Exception\FriendlyException;
use rnpagebuilder\core\Managers\UserManager;
use rnpagebuilder\DTO\ConditionGroupOptionsDTO;
use rnpagebuilder\DTO\ConditionLineOptionsDTO;
use rnpagebuilder\DTO\ConditionTypeEnumDTO;
use rnpagebuilder\DTO\EditPageAreaOptionsDTO;
use rnpagebuilder\PageGenerator\Core\QueryBuilder\Comparison\FixedValueComparison;
use rnpagebuilder\PageGenerator\Core\QueryBuilder\Filters\FilterGroup;
use rnpagebuilder\PageGenerator\Core\QueryBuilder\Filters\FilterLineBase;
use rnpagebuilder\PageGenerator\Managers\MessageManager;
use rnpagebuilder\PageGenerator\TextRenderer\DocumentTextRenderer;

class EditViewPageArea extends PageAreaBase
{
    /** @var EditPageAreaOptionsDTO */
    public $Options;
    public function MaybeUpdateDataSource()
    {
        $entryId=intval($this->PageGenerator->GetGetParameter('entryid'));


        if(!wp_verify_nonce($this->PageGenerator->GetGetParameter('nonce'),$this->PageGenerator->Options->Id.'_'.$this->PageGenerator->Options->FormId.'_'.$entryId.'_edit'))
            throw new FriendlyException('Invalid request, please try again');


        $condition=(new ConditionGroupOptionsDTO())->Merge();
        $condition->ConditionLines=[(new ConditionLineOptionsDTO())->Merge()];
        $condition->ConditionLines[0]->FieldId='__entryId';
        $condition->ConditionLines[0]->Comparison='Equal';
        $condition->ConditionLines[0]->PathId='';
        $condition->ConditionLines[0]->Type=ConditionTypeEnumDTO::$Filter;
        $condition->ConditionLines[0]->SubType='EntryId';
        $condition->ConditionLines[0]->Value=$entryId;
        $this->PageGenerator->AddAdditionalFilters($condition);
        parent::MaybeUpdateDataSource(); // TODO: Change the autogenerated stub
    }

    public function CanViewPage()
    {
        if(!$this->loader->IsPR()){
            return MessageManager::ShowErrorMessage(__("Sorry this feature is only available in the full version"));
        }


        $userManager=new UserManager($this->loader);
        $hasAccess=$userManager->CurrentUserHasRole($this->Options->AllowedRoles);
        $this->Document=new DocumentTextRenderer($this->Options->NotAllowedMessage,$this,null,$this->PageGenerator);
        $this->Document->Initialize();
        if(!$hasAccess)
            return MessageManager::ShowErrorMessage($this->Document->Render());
        return parent::CanViewPage(); // TODO: Change the autogenerated stub
    }


}